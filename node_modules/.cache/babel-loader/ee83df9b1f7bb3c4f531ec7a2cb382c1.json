{"ast":null,"code":"/**\r\n * When payments are due\r\n *\r\n * @since v0.0.12\r\n */\nvar PaymentDueTime;\n\n(function (PaymentDueTime) {\n  /** Payments due at the beginning of a period (1) */\n  PaymentDueTime[\"Begin\"] = \"begin\";\n  /** Payments are due at the end of a period (0) */\n\n  PaymentDueTime[\"End\"] = \"end\"; // 0\n})(PaymentDueTime || (PaymentDueTime = {}));\n/**\r\n * Compute the future value.\r\n *\r\n * @param rate - Rate of interest as decimal (not per cent) per period\r\n * @param nper - Number of compounding periods\r\n * @param pmt - A fixed payment, paid either at the beginning or ar the end (specified by `when`)\r\n * @param pv - Present value\r\n * @param when - When payment was made\r\n *\r\n * @returns The value at the end of the `nper` periods\r\n *\r\n * @since v0.0.12\r\n *\r\n * ## Examples\r\n *\r\n * What is the future value after 10 years of saving $100 now, with\r\n * an additional monthly savings of $100. Assume the interest rate is\r\n * 5% (annually) compounded monthly?\r\n *\r\n * ```javascript\r\n * import { fv } from 'financial'\r\n *\r\n * fv(0.05 / 12, 10 * 12, -100, -100) // 15692.928894335748\r\n * ```\r\n *\r\n * By convention, the negative sign represents cash flow out (i.e. money not\r\n * available today).  Thus, saving $100 a month at 5% annual interest leads\r\n * to $15,692.93 available to spend in 10 years.\r\n *\r\n * ## Notes\r\n *\r\n * The future value is computed by solving the equation:\r\n *\r\n * ```\r\n * fv + pv * (1+rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) == 0\r\n * ```\r\n *\r\n * or, when `rate == 0`:\r\n *\r\n * ```\r\n * fv + pv + pmt * nper == 0\r\n * ```\r\n *\r\n * ## References\r\n *\r\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\r\n */\n\n\nfunction fv(rate, nper, pmt, pv, when) {\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var isRateZero = rate === 0;\n\n  if (isRateZero) {\n    return -(pv + pmt * nper);\n  }\n\n  var temp = Math.pow(1 + rate, nper);\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  return -pv * temp - pmt * (1 + rate * whenMult) / rate * (temp - 1);\n}\n/**\r\n * Compute the payment against loan principal plus interest.\r\n *\r\n * @param rate - Rate of interest (per period)\r\n * @param nper - Number of compounding periods (e.g., number of payments)\r\n * @param pv - Present value (e.g., an amount borrowed)\r\n * @param fv - Future value (e.g., 0)\r\n * @param when - When payments are due\r\n *\r\n * @returns the (fixed) periodic payment\r\n *\r\n * @since v0.0.12\r\n *\r\n * ## Examples\r\n *\r\n * What is the monthly payment needed to pay off a $200,000 loan in 15\r\n * years at an annual interest rate of 7.5%?\r\n *\r\n * ```javascript\r\n * import { pmt } from 'financial'\r\n *\r\n * pmt(0.075/12, 12*15, 200000) // -1854.0247200054619\r\n * ```\r\n *\r\n * In order to pay-off (i.e., have a future-value of 0) the $200,000 obtained\r\n * today, a monthly payment of $1,854.02 would be required.  Note that this\r\n * example illustrates usage of `fv` having a default value of 0.\r\n *\r\n * ## Notes\r\n *\r\n * The payment is computed by solving the equation:\r\n *\r\n * ```\r\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate*when) / rate * ((1 + rate) ** nper - 1) == 0\r\n * ```\r\n *\r\n * or, when `rate == 0`:\r\n *\r\n * ```\r\n * fv + pv + pmt * nper == 0\r\n * ```\r\n *\r\n * for `pmt`.\r\n *\r\n * Note that computing a monthly mortgage payment is only\r\n * one use for this function.  For example, `pmt` returns the\r\n * periodic deposit one must make to achieve a specified\r\n * future balance given an initial deposit, a fixed,\r\n * periodically compounded interest rate, and the total\r\n * number of periods.\r\n *\r\n * ## References\r\n *\r\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\r\n */\n\n\nfunction pmt(rate, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var isRateZero = rate === 0;\n  var temp = Math.pow(1 + rate, nper);\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var maskedRate = isRateZero ? 1 : rate;\n  var fact = isRateZero ? nper : (1 + maskedRate * whenMult) * (temp - 1) / maskedRate;\n  return -(fv + pv * temp) / fact;\n}\n/**\r\n * Compute the number of periodic payments.\r\n *\r\n * @param rate - Rate of interest (per period)\r\n * @param pmt - Payment\r\n * @param pv - Present value\r\n * @param fv - Future value\r\n * @param when - When payments are due\r\n *\r\n * @returns The number of periodic payments\r\n *\r\n * @since v0.0.12\r\n *\r\n * ## Examples\r\n *\r\n * If you only had $150/month to pay towards the loan, how long would it take\r\n * to pay-off a loan of $8,000 at 7% annual interest?\r\n *\r\n * ```javascript\r\n * import { nper } from 'financial'\r\n *\r\n * Math.round(nper(0.07/12, -150, 8000), 5) // 64.07335\r\n * ```\r\n *\r\n * So, over 64 months would be required to pay off the loan.\r\n *\r\n * ## Notes\r\n *\r\n * The number of periods `nper` is computed by solving the equation:\r\n *\r\n * ```\r\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper-1) = 0\r\n * ```\r\n *\r\n * but if `rate = 0` then:\r\n *\r\n * ```\r\n * fv + pv + pmt * nper = 0\r\n * ```\r\n */\n\n\nfunction nper(rate, pmt, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var isRateZero = rate === 0;\n\n  if (isRateZero) {\n    return -(fv + pv) / pmt;\n  }\n\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var z = pmt * (1 + rate * whenMult) / rate;\n  return Math.log((-fv + z) / (pv + z)) / Math.log(1 + rate);\n}\n/**\r\n * Compute the interest portion of a payment.\r\n *\r\n * @param rate - Rate of interest as decimal (not per cent) per period\r\n * @param per - Interest paid against the loan changes during the life or the loan. The `per` is the payment period to calculate the interest amount\r\n * @param nper - Number of compounding periods\r\n * @param pv - Present value\r\n * @param fv - Future value\r\n * @param when - When payments are due\r\n *\r\n * @returns Interest portion of payment\r\n *\r\n * @since v0.0.12\r\n *\r\n * ## Examples\r\n *\r\n * What is the amortization schedule for a 1 year loan of $2500 at\r\n * 8.24% interest per year compounded monthly?\r\n *\r\n * ```javascript\r\n * const principal = 2500\r\n * const periods = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n * const ipmts = periods.map((per) => f.ipmt(0.0824 / 12, per, 1 * 12, principal))\r\n * expect(ipmts).toEqual([\r\n *   -17.166666666666668,\r\n *   -15.789337457350777,\r\n *   -14.402550587464257,\r\n *   -13.006241114404524,\r\n *   -11.600343649629737,\r\n *   -10.18479235559687,\r\n *   -8.759520942678298,\r\n *   -7.324462666057678,\r\n *   -5.879550322604295,\r\n *   -4.424716247725826,\r\n *   -2.9598923121998877,\r\n *   -1.4850099189833388\r\n * ])\r\n * const interestpd = ipmts.reduce((a, b) => a + b, 0)\r\n * expect(interestpd).toBeCloseTo(-112.98308424136215, 6)\r\n * ```\r\n *\r\n * The `periods` variable represents the periods of the loan.  Remember that financial equations start the period count at 1!\r\n *\r\n * ## Notes\r\n *\r\n * The total payment is made up of payment against principal plus interest.\r\n *\r\n * ```\r\n * pmt = ppmt + ipmt\r\n * ```\r\n */\n\n\nfunction ipmt(rate, per, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  } // Payments start at the first period, so payments before that\n  // don't make any sense.\n\n\n  if (per < 1) {\n    return Number.NaN;\n  } // If payments occur at the beginning of a period and this is the\n  // first period, then no interest has accrued.\n\n\n  if (when === PaymentDueTime.Begin && per === 1) {\n    return 0;\n  }\n\n  var totalPmt = pmt(rate, nper, pv, fv, when);\n  var ipmtVal = _rbl(rate, per, totalPmt, pv, when) * rate; // If paying at the beginning we need to discount by one period\n\n  if (when === PaymentDueTime.Begin && per > 1) {\n    ipmtVal = ipmtVal / (1 + rate);\n  }\n\n  return ipmtVal;\n}\n/**\r\n * Compute the payment against loan principal.\r\n *\r\n * @param rate - Rate of interest (per period)\r\n * @param per - Amount paid against the loan changes.  The `per` is the period of interest.\r\n * @param nper - Number of compounding periods\r\n * @param pv - Present value\r\n * @param fv - Future value\r\n * @param when - When payments are due\r\n *\r\n * @returns the payment against loan principal\r\n *\r\n * @since v0.0.14\r\n */\n\n\nfunction ppmt(rate, per, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var total = pmt(rate, nper, pv, fv, when);\n  return total - ipmt(rate, per, nper, pv, fv, when);\n}\n/**\r\n * Calculates the present value of an annuity investment based on constant-amount\r\n * periodic payments and a constant interest rate.\r\n *\r\n * @param rate - Rate of interest (per period)\r\n * @param nper - Number of compounding periods\r\n * @param pmt - Payment\r\n * @param fv - Future value\r\n * @param when - When payments are due\r\n *\r\n * @returns the present value of a payment or investment\r\n *\r\n * @since v0.0.15\r\n *\r\n * ## Examples\r\n *\r\n * What is the present value (e.g., the initial investment)\r\n * of an investment that needs to total $15692.93\r\n * after 10 years of saving $100 every month?  Assume the\r\n * interest rate is 5% (annually) compounded monthly.\r\n *\r\n * ```javascript\r\n * import { pv } from 'financial'\r\n *\r\n * pv(0.05/12, 10*12, -100, 15692.93) // -100.00067131625819\r\n * ```\r\n *\r\n * By convention, the negative sign represents cash flow out\r\n * (i.e., money not available today).  Thus, to end up with\r\n * $15,692.93 in 10 years saving $100 a month at 5% annual\r\n * interest, one's initial deposit should also be $100.\r\n *\r\n * ## Notes\r\n *\r\n * The present value is computed by solving the equation:\r\n *\r\n * ```\r\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) = 0\r\n * ```\r\n *\r\n * or, when `rate = 0`:\r\n *\r\n * ```\r\n * fv + pv + pmt * nper = 0\r\n * ```\r\n *\r\n * for `pv`, which is then returned.\r\n *\r\n * ## References\r\n *\r\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\r\n */\n\n\nfunction pv(rate, nper, pmt, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var isRateZero = rate === 0;\n  var temp = Math.pow(1 + rate, nper);\n  var fact = isRateZero ? nper : (1 + rate * whenMult) * (temp - 1) / rate;\n  return -(fv + pmt * fact) / temp;\n}\n/**\r\n * Compute the rate of interest per period\r\n *\r\n * @param nper - Number of compounding periods\r\n * @param pmt - Payment\r\n * @param pv - Present value\r\n * @param fv - Future value\r\n * @param when - When payments are due ('begin' or 'end')\r\n * @param guess - Starting guess for solving the rate of interest\r\n * @param tol - Required tolerance for the solution\r\n * @param maxIter - Maximum iterations in finding the solution\r\n *\r\n * @returns the rate of interest per period (or `NaN` if it could\r\n *  not be computed within the number of iterations provided)\r\n *\r\n * @since v0.0.16\r\n *\r\n * ## Notes\r\n *\r\n * Use Newton's iteration until the change is less than 1e-6\r\n * for all values or a maximum of 100 iterations is reached.\r\n * Newton's rule is:\r\n *\r\n * ```\r\n * r_{n+1} = r_{n} - g(r_n)/g'(r_n)\r\n * ```\r\n *\r\n * where:\r\n *\r\n * - `g(r)` is the formula\r\n * - `g'(r)` is the derivative with respect to r.\r\n *\r\n *\r\n * The rate of interest is computed by iteratively solving the\r\n * (non-linear) equation:\r\n *\r\n * ```\r\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper - 1) = 0\r\n * ```\r\n *\r\n * for `rate.\r\n *\r\n * ## References\r\n *\r\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\r\n */\n\n\nfunction rate(nper, pmt, pv, fv, when, guess, tol, maxIter) {\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  if (guess === void 0) {\n    guess = 0.1;\n  }\n\n  if (tol === void 0) {\n    tol = 1e-6;\n  }\n\n  if (maxIter === void 0) {\n    maxIter = 100;\n  }\n\n  var rn = guess;\n  var iterator = 0;\n  var close = false;\n\n  while (iterator < maxIter && !close) {\n    var rnp1 = rn - _gDivGp(rn, nper, pmt, pv, fv, when);\n\n    var diff = Math.abs(rnp1 - rn);\n    close = diff < tol;\n    iterator++;\n    rn = rnp1;\n  } // if exausted all the iterations and the result is not\n  // close enough, returns `NaN`\n\n\n  if (!close) {\n    return Number.NaN;\n  }\n\n  return rn;\n}\n/**\r\n * Return the Internal Rate of Return (IRR).\r\n *\r\n * This is the \"average\" periodically compounded rate of return\r\n * that gives a net present value of 0.0; for a more complete\r\n * explanation, see Notes below.\r\n *\r\n * @param values - Input cash flows per time period.\r\n *   By convention, net \"deposits\"\r\n *   are negative and net \"withdrawals\" are positive.  Thus, for\r\n *   example, at least the first element of `values`, which represents\r\n *   the initial investment, will typically be negative.\r\n * @param guess - Starting guess for solving the Internal Rate of Return\r\n * @param tol - Required tolerance for the solution\r\n * @param maxIter - Maximum iterations in finding the solution\r\n *\r\n * @returns Internal Rate of Return for periodic input values\r\n *\r\n * @since v0.0.17\r\n *\r\n * ## Notes\r\n *\r\n * The IRR is perhaps best understood through an example (illustrated\r\n * using `irr` in the Examples section below).\r\n *\r\n * Suppose one invests 100\r\n * units and then makes the following withdrawals at regular (fixed)\r\n * intervals: 39, 59, 55, 20.  Assuming the ending value is 0, one's 100\r\n * unit investment yields 173 units; however, due to the combination of\r\n * compounding and the periodic withdrawals, the \"average\" rate of return\r\n * is neither simply 0.73/4 nor (1.73)^0.25-1.\r\n * Rather, it is the solution (for `r`) of the equation:\r\n *\r\n * ```\r\n * -100 + 39/(1+r) + 59/((1+r)^2) + 55/((1+r)^3) + 20/((1+r)^4) = 0\r\n * ```\r\n *\r\n * In general, for `values` = `[0, 1, ... M]`,\r\n * `irr` is the solution of the equation:\r\n *\r\n * ```\r\n * \\\\sum_{t=0}^M{\\\\frac{v_t}{(1+irr)^{t}}} = 0\r\n * ```\r\n *\r\n * ## Example\r\n *\r\n * ```javascript\r\n * import { irr } from 'financial'\r\n *\r\n * irr([-100, 39, 59, 55, 20]) // 0.28095\r\n * irr([-100, 0, 0, 74]) // -0.0955\r\n * irr([-100, 100, 0, -7]) // -0.0833\r\n * irr([-100, 100, 0, 7]) // 0.06206\r\n * irr([-5, 10.5, 1, -8, 1]) // 0.0886\r\n * ```\r\n *\r\n * ## References\r\n *\r\n * - L. J. Gitman, \"Principles of Managerial Finance, Brief,\" 3rd ed.,\r\n *  Addison-Wesley, 2003, pg. 348.\r\n */\n\n\nfunction irr(values, guess, tol, maxIter) {\n  if (guess === void 0) {\n    guess = 0.1;\n  }\n\n  if (tol === void 0) {\n    tol = 1e-6;\n  }\n\n  if (maxIter === void 0) {\n    maxIter = 100;\n  } // Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n  // ASF licensed (check the link for the full license)\n  // Credits: algorithm inspired by Apache OpenOffice\n  // Initialize dates and check that values contains at\n  // least one positive value and one negative value\n\n\n  var dates = [];\n  var positive = false;\n  var negative = false;\n\n  for (var i = 0; i < values.length; i++) {\n    dates[i] = i === 0 ? 0 : dates[i - 1] + 365;\n\n    if (values[i] > 0) {\n      positive = true;\n    }\n\n    if (values[i] < 0) {\n      negative = true;\n    }\n  } // Return error if values does not contain at least one positive\n  // value and one negative value\n\n\n  if (!positive || !negative) {\n    return Number.NaN;\n  } // Initialize guess and resultRate\n\n\n  var resultRate = guess; // Implement Newton's method\n\n  var newRate, epsRate, resultValue;\n  var iteration = 0;\n  var contLoop = true;\n\n  do {\n    resultValue = _irrResult(values, dates, resultRate);\n    newRate = resultRate - resultValue / _irrResultDeriv(values, dates, resultRate);\n    epsRate = Math.abs(newRate - resultRate);\n    resultRate = newRate;\n    contLoop = epsRate > tol && Math.abs(resultValue) > tol;\n  } while (contLoop && ++iteration < maxIter);\n\n  if (contLoop) {\n    return Number.NaN;\n  } // Return internal rate of return\n\n\n  return resultRate;\n}\n/**\r\n * Returns the NPV (Net Present Value) of a cash flow series.\r\n *\r\n * @param rate - The discount rate\r\n * @param values - The values of the time series of cash flows.  The (fixed) time\r\n * interval between cash flow \"events\" must be the same as that for\r\n * which `rate` is given (i.e., if `rate` is per year, then precisely\r\n * a year is understood to elapse between each cash flow event).  By\r\n * convention, investments or \"deposits\" are negative, income or\r\n * \"withdrawals\" are positive; `values` must begin with the initial\r\n * investment, thus `values[0]` will typically be negative.\r\n * @returns The NPV of the input cash flow series `values` at the discount `rate`.\r\n *\r\n * @since v0.0.18\r\n *\r\n * ## Warnings\r\n *\r\n * `npv considers a series of cashflows starting in the present (t = 0).\r\n * NPV can also be defined with a series of future cashflows, paid at the\r\n * end, rather than the start, of each period. If future cashflows are used,\r\n * the first cashflow `values[0]` must be zeroed and added to the net\r\n * present value of the future cashflows. This is demonstrated in the\r\n * examples.\r\n *\r\n * ## Notes\r\n *\r\n * Returns the result of:\r\n *\r\n * ```\r\n * \\\\sum_{t=0}^{M-1}{\\\\frac{values_t}{(1+rate)^{t}}}\r\n * ```\r\n *\r\n * ## Examples\r\n *\r\n * Consider a potential project with an initial investment of $40 000 and\r\n * projected cashflows of $5 000, $8 000, $12 000 and $30 000 at the end of\r\n * each period discounted at a rate of 8% per period. To find the project's\r\n * net present value:\r\n *\r\n * ```javascript\r\n * import {npv} from 'financial'\r\n *\r\n * const rate = 0.08\r\n * const cashflows = [-40_000, 5000, 8000, 12000, 30000]\r\n * npv(rate, cashflows) // 3065.2226681795255\r\n * ```\r\n *\r\n * It may be preferable to split the projected cashflow into an initial\r\n * investment and expected future cashflows. In this case, the value of\r\n * the initial cashflow is zero and the initial investment is later added\r\n * to the future cashflows net present value:\r\n *\r\n * ```javascript\r\n * const initialCashflow = cashflows[0]\r\n * cashflows[0] = 0\r\n *\r\n * npv(rate, cashflows) + initialCashflow // 3065.2226681795255\r\n * ```\r\n *\r\n * ## References\r\n *\r\n * L. J. Gitman, \"Principles of Managerial Finance, Brief,\"\r\n * 3rd ed., Addison-Wesley, 2003, pg. 346.\r\n */\n\n\nfunction npv(rate, values) {\n  return values.reduce(function (acc, curr, i) {\n    return acc + curr / Math.pow(1 + rate, i);\n  }, 0);\n}\n/**\r\n * Calculates the Modified Internal Rate of Return.\r\n *\r\n * @param values - Cash flows (must contain at least one positive and one negative\r\n *   value) or nan is returned.  The first value is considered a sunk\r\n *   cost at time zero.\r\n * @param financeRate - Interest rate paid on the cash flows\r\n * @param reinvestRate - Interest rate received on the cash flows upon reinvestment\r\n *\r\n * @returns Modified internal rate of return\r\n *\r\n * @since v0.1.0\r\n */\n\n\nfunction mirr(values, financeRate, reinvestRate) {\n  var positive = false;\n  var negative = false;\n\n  for (var i = 0; i < values.length; i++) {\n    if (values[i] > 0) {\n      positive = true;\n    }\n\n    if (values[i] < 0) {\n      negative = true;\n    }\n  } // Return error if values does not contain at least one\n  // positive value and one negative value\n\n\n  if (!positive || !negative) {\n    return Number.NaN;\n  }\n\n  var numer = Math.abs(npv(reinvestRate, values.map(function (x) {\n    return x > 0 ? x : 0;\n  })));\n  var denom = Math.abs(npv(financeRate, values.map(function (x) {\n    return x < 0 ? x : 0;\n  })));\n  return Math.pow(numer / denom, 1 / (values.length - 1)) * (1 + reinvestRate) - 1;\n}\n/**\r\n * This function is here to simply have a different name for the 'fv'\r\n * function to not interfere with the 'fv' keyword argument within the 'ipmt'\r\n * function.  It is the 'remaining balance on loan' which might be useful as\r\n * it's own function, but is easily calculated with the 'fv' function.\r\n *\r\n * @private\r\n */\n\n\nfunction _rbl(rate, per, pmt, pv, when) {\n  return fv(rate, per - 1, pmt, pv, when);\n}\n/**\r\n * Evaluates `g(r_n)/g'(r_n)`, where:\r\n *\r\n * ```\r\n * g = fv + pv * (1+rate) ** nper + pmt * (1+rate * when)/rate * ((1+rate) ** nper - 1)\r\n * ```\r\n *\r\n * @private\r\n */\n\n\nfunction _gDivGp(r, n, p, x, y, when) {\n  var w = when === PaymentDueTime.Begin ? 1 : 0;\n  var t1 = Math.pow(r + 1, n);\n  var t2 = Math.pow(r + 1, n - 1);\n  var g = y + t1 * x + p * (t1 - 1) * (r * w + 1) / r;\n  var gp = n * t2 * x - p * (t1 - 1) * (r * w + 1) / Math.pow(r, 2) + n * p * t2 * (r * w + 1) / r + p * (t1 - 1) * w / r;\n  return g / gp;\n}\n/**\r\n * Calculates the resulting amount.\r\n *\r\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\r\n * ASF licensed (check the link for the full license)\r\n *\r\n * @private\r\n */\n\n\nfunction _irrResult(values, dates, rate) {\n  var r = rate + 1;\n  var result = values[0];\n\n  for (var i = 1; i < values.length; i++) {\n    result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);\n  }\n\n  return result;\n}\n/**\r\n * Calculates the first derivation\r\n *\r\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\r\n * ASF licensed (check the link for the full license)\r\n *\r\n * @private\r\n */\n\n\nfunction _irrResultDeriv(values, dates, rate) {\n  var r = rate + 1;\n  var result = 0;\n\n  for (var i = 1; i < values.length; i++) {\n    var frac = (dates[i] - dates[0]) / 365;\n    result -= frac * values[i] / Math.pow(r, frac + 1);\n  }\n\n  return result;\n}\n\nexport { PaymentDueTime, fv, ipmt, irr, mirr, nper, npv, pmt, ppmt, pv, rate };","map":{"version":3,"mappings":"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","names":["PaymentDueTime","fv","rate","nper","pmt","pv","when","End","isRateZero","temp","whenMult","Begin","maskedRate","fact","z","Math","log","ipmt","per","Number","NaN","totalPmt","ipmtVal","_rbl","ppmt","total","guess","tol","maxIter","rn","iterator","close","rnp1","_gDivGp","diff","abs","irr","values","dates","positive","negative","i","length","resultRate","newRate","epsRate","resultValue","iteration","contLoop","_irrResult","_irrResultDeriv","npv","reduce","acc","curr","mirr","financeRate","reinvestRate","numer","map","x","denom","r","n","p","y","w","t1","t2","g","gp","result","pow","frac"],"sources":["/Library/WebServer/Documents/indiealley/wp-content/reactpress/apps/mortgage-app/node_modules/financial/src/financial.ts"],"sourcesContent":["/**\n * When payments are due\n *\n * @since v0.0.12\n */\nexport enum PaymentDueTime {\n  /** Payments due at the beginning of a period (1) */\n  Begin = 'begin', // 1\n  /** Payments are due at the end of a period (0) */\n  End = 'end' // 0\n}\n\n/**\n * Compute the future value.\n *\n * @param rate - Rate of interest as decimal (not per cent) per period\n * @param nper - Number of compounding periods\n * @param pmt - A fixed payment, paid either at the beginning or ar the end (specified by `when`)\n * @param pv - Present value\n * @param when - When payment was made\n *\n * @returns The value at the end of the `nper` periods\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the future value after 10 years of saving $100 now, with\n * an additional monthly savings of $100. Assume the interest rate is\n * 5% (annually) compounded monthly?\n *\n * ```javascript\n * import { fv } from 'financial'\n *\n * fv(0.05 / 12, 10 * 12, -100, -100) // 15692.928894335748\n * ```\n *\n * By convention, the negative sign represents cash flow out (i.e. money not\n * available today).  Thus, saving $100 a month at 5% annual interest leads\n * to $15,692.93 available to spend in 10 years.\n *\n * ## Notes\n *\n * The future value is computed by solving the equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) == 0\n * ```\n *\n * or, when `rate == 0`:\n *\n * ```\n * fv + pv + pmt * nper == 0\n * ```\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nexport function fv (rate: number, nper: number, pmt: number, pv: number, when : PaymentDueTime = PaymentDueTime.End) : number {\n  const isRateZero = rate === 0\n\n  if (isRateZero) {\n    return -(pv + pmt * nper)\n  }\n\n  const temp = (1 + rate) ** nper\n  const whenMult = when === PaymentDueTime.Begin ? 1 : 0\n  return (-pv * temp - pmt * (1 + rate * whenMult) / rate * (temp - 1))\n}\n\n/**\n * Compute the payment against loan principal plus interest.\n *\n * @param rate - Rate of interest (per period)\n * @param nper - Number of compounding periods (e.g., number of payments)\n * @param pv - Present value (e.g., an amount borrowed)\n * @param fv - Future value (e.g., 0)\n * @param when - When payments are due\n *\n * @returns the (fixed) periodic payment\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the monthly payment needed to pay off a $200,000 loan in 15\n * years at an annual interest rate of 7.5%?\n *\n * ```javascript\n * import { pmt } from 'financial'\n *\n * pmt(0.075/12, 12*15, 200000) // -1854.0247200054619\n * ```\n *\n * In order to pay-off (i.e., have a future-value of 0) the $200,000 obtained\n * today, a monthly payment of $1,854.02 would be required.  Note that this\n * example illustrates usage of `fv` having a default value of 0.\n *\n * ## Notes\n *\n * The payment is computed by solving the equation:\n *\n * ```\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate*when) / rate * ((1 + rate) ** nper - 1) == 0\n * ```\n *\n * or, when `rate == 0`:\n *\n * ```\n * fv + pv + pmt * nper == 0\n * ```\n *\n * for `pmt`.\n *\n * Note that computing a monthly mortgage payment is only\n * one use for this function.  For example, `pmt` returns the\n * periodic deposit one must make to achieve a specified\n * future balance given an initial deposit, a fixed,\n * periodically compounded interest rate, and the total\n * number of periods.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nexport function pmt (rate: number, nper: number, pv: number, fv = 0, when = PaymentDueTime.End): number {\n  const isRateZero = rate === 0\n  const temp = (1 + rate) ** nper\n  const whenMult = when === PaymentDueTime.Begin ? 1 : 0\n  const maskedRate = isRateZero ? 1 : rate\n  const fact = isRateZero\n    ? nper\n    : (1 + maskedRate * whenMult) * (temp - 1) / maskedRate\n\n  return -(fv + pv * temp) / fact\n}\n\n/**\n * Compute the number of periodic payments.\n *\n * @param rate - Rate of interest (per period)\n * @param pmt - Payment\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns The number of periodic payments\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * If you only had $150/month to pay towards the loan, how long would it take\n * to pay-off a loan of $8,000 at 7% annual interest?\n *\n * ```javascript\n * import { nper } from 'financial'\n *\n * Math.round(nper(0.07/12, -150, 8000), 5) // 64.07335\n * ```\n *\n * So, over 64 months would be required to pay off the loan.\n *\n * ## Notes\n *\n * The number of periods `nper` is computed by solving the equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper-1) = 0\n * ```\n *\n * but if `rate = 0` then:\n *\n * ```\n * fv + pv + pmt * nper = 0\n * ```\n */\nexport function nper (rate: number, pmt: number, pv: number, fv = 0, when = PaymentDueTime.End) : number {\n  const isRateZero = rate === 0\n  if (isRateZero) {\n    return -(fv + pv) / pmt\n  }\n\n  const whenMult = when === PaymentDueTime.Begin ? 1 : 0\n  const z = pmt * (1 + rate * whenMult) / rate\n  return Math.log((-fv + z) / (pv + z)) / Math.log(1 + rate)\n}\n\n/**\n * Compute the interest portion of a payment.\n *\n * @param rate - Rate of interest as decimal (not per cent) per period\n * @param per - Interest paid against the loan changes during the life or the loan. The `per` is the payment period to calculate the interest amount\n * @param nper - Number of compounding periods\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns Interest portion of payment\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the amortization schedule for a 1 year loan of $2500 at\n * 8.24% interest per year compounded monthly?\n *\n * ```javascript\n * const principal = 2500\n * const periods = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n * const ipmts = periods.map((per) => f.ipmt(0.0824 / 12, per, 1 * 12, principal))\n * expect(ipmts).toEqual([\n *   -17.166666666666668,\n *   -15.789337457350777,\n *   -14.402550587464257,\n *   -13.006241114404524,\n *   -11.600343649629737,\n *   -10.18479235559687,\n *   -8.759520942678298,\n *   -7.324462666057678,\n *   -5.879550322604295,\n *   -4.424716247725826,\n *   -2.9598923121998877,\n *   -1.4850099189833388\n * ])\n * const interestpd = ipmts.reduce((a, b) => a + b, 0)\n * expect(interestpd).toBeCloseTo(-112.98308424136215, 6)\n * ```\n *\n * The `periods` variable represents the periods of the loan.  Remember that financial equations start the period count at 1!\n *\n * ## Notes\n *\n * The total payment is made up of payment against principal plus interest.\n *\n * ```\n * pmt = ppmt + ipmt\n * ```\n */\nexport function ipmt (rate: number, per: number, nper: number, pv: number, fv = 0, when = PaymentDueTime.End) : number {\n  // Payments start at the first period, so payments before that\n  // don't make any sense.\n  if (per < 1) {\n    return Number.NaN\n  }\n\n  // If payments occur at the beginning of a period and this is the\n  // first period, then no interest has accrued.\n  if (when === PaymentDueTime.Begin && per === 1) {\n    return 0\n  }\n\n  const totalPmt = pmt(rate, nper, pv, fv, when)\n  let ipmtVal = _rbl(rate, per, totalPmt, pv, when) * rate\n\n  // If paying at the beginning we need to discount by one period\n  if (when === PaymentDueTime.Begin && per > 1) {\n    ipmtVal = ipmtVal / (1 + rate)\n  }\n\n  return ipmtVal\n}\n\n/**\n * Compute the payment against loan principal.\n *\n * @param rate - Rate of interest (per period)\n * @param per - Amount paid against the loan changes.  The `per` is the period of interest.\n * @param nper - Number of compounding periods\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns the payment against loan principal\n *\n * @since v0.0.14\n */\nexport function ppmt (rate: number, per: number, nper: number, pv: number, fv = 0, when = PaymentDueTime.End) : number {\n  const total = pmt(rate, nper, pv, fv, when)\n  return total - ipmt(rate, per, nper, pv, fv, when)\n}\n\n/**\n * Calculates the present value of an annuity investment based on constant-amount\n * periodic payments and a constant interest rate.\n *\n * @param rate - Rate of interest (per period)\n * @param nper - Number of compounding periods\n * @param pmt - Payment\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns the present value of a payment or investment\n *\n * @since v0.0.15\n *\n * ## Examples\n *\n * What is the present value (e.g., the initial investment)\n * of an investment that needs to total $15692.93\n * after 10 years of saving $100 every month?  Assume the\n * interest rate is 5% (annually) compounded monthly.\n *\n * ```javascript\n * import { pv } from 'financial'\n *\n * pv(0.05/12, 10*12, -100, 15692.93) // -100.00067131625819\n * ```\n *\n * By convention, the negative sign represents cash flow out\n * (i.e., money not available today).  Thus, to end up with\n * $15,692.93 in 10 years saving $100 a month at 5% annual\n * interest, one's initial deposit should also be $100.\n *\n * ## Notes\n *\n * The present value is computed by solving the equation:\n *\n * ```\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) = 0\n * ```\n *\n * or, when `rate = 0`:\n *\n * ```\n * fv + pv + pmt * nper = 0\n * ```\n *\n * for `pv`, which is then returned.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nexport function pv (rate: number, nper: number, pmt: number, fv = 0, when = PaymentDueTime.End): number {\n  const whenMult = when === PaymentDueTime.Begin ? 1 : 0\n  const isRateZero = rate === 0\n  const temp = (1 + rate) ** nper\n  const fact = isRateZero\n    ? nper\n    : (1 + rate * whenMult) * (temp - 1) / rate\n  return -(fv + pmt * fact) / temp\n}\n\n/**\n * Compute the rate of interest per period\n *\n * @param nper - Number of compounding periods\n * @param pmt - Payment\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due ('begin' or 'end')\n * @param guess - Starting guess for solving the rate of interest\n * @param tol - Required tolerance for the solution\n * @param maxIter - Maximum iterations in finding the solution\n *\n * @returns the rate of interest per period (or `NaN` if it could\n *  not be computed within the number of iterations provided)\n *\n * @since v0.0.16\n *\n * ## Notes\n *\n * Use Newton's iteration until the change is less than 1e-6\n * for all values or a maximum of 100 iterations is reached.\n * Newton's rule is:\n *\n * ```\n * r_{n+1} = r_{n} - g(r_n)/g'(r_n)\n * ```\n *\n * where:\n *\n * - `g(r)` is the formula\n * - `g'(r)` is the derivative with respect to r.\n *\n *\n * The rate of interest is computed by iteratively solving the\n * (non-linear) equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper - 1) = 0\n * ```\n *\n * for `rate.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nexport function rate (nper: number, pmt: number, pv: number, fv: number, when = PaymentDueTime.End, guess = 0.1, tol = 1e-6, maxIter = 100) : number {\n  let rn = guess\n  let iterator = 0\n  let close = false\n\n  while (iterator < maxIter && !close) {\n    const rnp1 = rn - _gDivGp(rn, nper, pmt, pv, fv, when)\n    const diff = Math.abs(rnp1 - rn)\n    close = diff < tol\n    iterator++\n    rn = rnp1\n  }\n\n  // if exausted all the iterations and the result is not\n  // close enough, returns `NaN`\n  if (!close) {\n    return Number.NaN\n  }\n\n  return rn\n}\n\n/**\n * Return the Internal Rate of Return (IRR).\n *\n * This is the \"average\" periodically compounded rate of return\n * that gives a net present value of 0.0; for a more complete\n * explanation, see Notes below.\n *\n * @param values - Input cash flows per time period.\n *   By convention, net \"deposits\"\n *   are negative and net \"withdrawals\" are positive.  Thus, for\n *   example, at least the first element of `values`, which represents\n *   the initial investment, will typically be negative.\n * @param guess - Starting guess for solving the Internal Rate of Return\n * @param tol - Required tolerance for the solution\n * @param maxIter - Maximum iterations in finding the solution\n *\n * @returns Internal Rate of Return for periodic input values\n *\n * @since v0.0.17\n *\n * ## Notes\n *\n * The IRR is perhaps best understood through an example (illustrated\n * using `irr` in the Examples section below).\n *\n * Suppose one invests 100\n * units and then makes the following withdrawals at regular (fixed)\n * intervals: 39, 59, 55, 20.  Assuming the ending value is 0, one's 100\n * unit investment yields 173 units; however, due to the combination of\n * compounding and the periodic withdrawals, the \"average\" rate of return\n * is neither simply 0.73/4 nor (1.73)^0.25-1.\n * Rather, it is the solution (for `r`) of the equation:\n *\n * ```\n * -100 + 39/(1+r) + 59/((1+r)^2) + 55/((1+r)^3) + 20/((1+r)^4) = 0\n * ```\n *\n * In general, for `values` = `[0, 1, ... M]`,\n * `irr` is the solution of the equation:\n *\n * ```\n * \\\\sum_{t=0}^M{\\\\frac{v_t}{(1+irr)^{t}}} = 0\n * ```\n *\n * ## Example\n *\n * ```javascript\n * import { irr } from 'financial'\n *\n * irr([-100, 39, 59, 55, 20]) // 0.28095\n * irr([-100, 0, 0, 74]) // -0.0955\n * irr([-100, 100, 0, -7]) // -0.0833\n * irr([-100, 100, 0, 7]) // 0.06206\n * irr([-5, 10.5, 1, -8, 1]) // 0.0886\n * ```\n *\n * ## References\n *\n * - L. J. Gitman, \"Principles of Managerial Finance, Brief,\" 3rd ed.,\n *  Addison-Wesley, 2003, pg. 348.\n */\nexport function irr (values: number[], guess = 0.1, tol = 1e-6, maxIter = 100): number {\n  // Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n  // ASF licensed (check the link for the full license)\n  // Credits: algorithm inspired by Apache OpenOffice\n\n  // Initialize dates and check that values contains at\n  // least one positive value and one negative value\n  const dates : number[] = []\n  let positive = false\n  let negative = false\n  for (let i = 0; i < values.length; i++) {\n    dates[i] = (i === 0) ? 0 : dates[i - 1] + 365\n    if (values[i] > 0) {\n      positive = true\n    }\n    if (values[i] < 0) {\n      negative = true\n    }\n  }\n\n  // Return error if values does not contain at least one positive\n  // value and one negative value\n  if (!positive || !negative) {\n    return Number.NaN\n  }\n\n  // Initialize guess and resultRate\n  let resultRate = guess\n\n  // Implement Newton's method\n  let newRate, epsRate, resultValue\n  let iteration = 0\n  let contLoop = true\n  do {\n    resultValue = _irrResult(values, dates, resultRate)\n    newRate = resultRate - resultValue / _irrResultDeriv(values, dates, resultRate)\n    epsRate = Math.abs(newRate - resultRate)\n    resultRate = newRate\n    contLoop = (epsRate > tol) && (Math.abs(resultValue) > tol)\n  } while (contLoop && (++iteration < maxIter))\n\n  if (contLoop) {\n    return Number.NaN\n  }\n\n  // Return internal rate of return\n  return resultRate\n}\n\n/**\n * Returns the NPV (Net Present Value) of a cash flow series.\n *\n * @param rate - The discount rate\n * @param values - The values of the time series of cash flows.  The (fixed) time\n * interval between cash flow \"events\" must be the same as that for\n * which `rate` is given (i.e., if `rate` is per year, then precisely\n * a year is understood to elapse between each cash flow event).  By\n * convention, investments or \"deposits\" are negative, income or\n * \"withdrawals\" are positive; `values` must begin with the initial\n * investment, thus `values[0]` will typically be negative.\n * @returns The NPV of the input cash flow series `values` at the discount `rate`.\n *\n * @since v0.0.18\n *\n * ## Warnings\n *\n * `npv considers a series of cashflows starting in the present (t = 0).\n * NPV can also be defined with a series of future cashflows, paid at the\n * end, rather than the start, of each period. If future cashflows are used,\n * the first cashflow `values[0]` must be zeroed and added to the net\n * present value of the future cashflows. This is demonstrated in the\n * examples.\n *\n * ## Notes\n *\n * Returns the result of:\n *\n * ```\n * \\\\sum_{t=0}^{M-1}{\\\\frac{values_t}{(1+rate)^{t}}}\n * ```\n *\n * ## Examples\n *\n * Consider a potential project with an initial investment of $40 000 and\n * projected cashflows of $5 000, $8 000, $12 000 and $30 000 at the end of\n * each period discounted at a rate of 8% per period. To find the project's\n * net present value:\n *\n * ```javascript\n * import {npv} from 'financial'\n *\n * const rate = 0.08\n * const cashflows = [-40_000, 5000, 8000, 12000, 30000]\n * npv(rate, cashflows) // 3065.2226681795255\n * ```\n *\n * It may be preferable to split the projected cashflow into an initial\n * investment and expected future cashflows. In this case, the value of\n * the initial cashflow is zero and the initial investment is later added\n * to the future cashflows net present value:\n *\n * ```javascript\n * const initialCashflow = cashflows[0]\n * cashflows[0] = 0\n *\n * npv(rate, cashflows) + initialCashflow // 3065.2226681795255\n * ```\n *\n * ## References\n *\n * L. J. Gitman, \"Principles of Managerial Finance, Brief,\"\n * 3rd ed., Addison-Wesley, 2003, pg. 346.\n */\nexport function npv (rate: number, values: number[]) : number {\n  return values.reduce(\n    (acc, curr, i) => acc + (curr / (1 + rate) ** i),\n    0\n  )\n}\n\n/**\n * Calculates the Modified Internal Rate of Return.\n *\n * @param values - Cash flows (must contain at least one positive and one negative\n *   value) or nan is returned.  The first value is considered a sunk\n *   cost at time zero.\n * @param financeRate - Interest rate paid on the cash flows\n * @param reinvestRate - Interest rate received on the cash flows upon reinvestment\n *\n * @returns Modified internal rate of return\n *\n * @since v0.1.0\n */\nexport function mirr (values: number[], financeRate: number, reinvestRate: number): number {\n  let positive = false\n  let negative = false\n  for (let i = 0; i < values.length; i++) {\n    if (values[i] > 0) {\n      positive = true\n    }\n    if (values[i] < 0) {\n      negative = true\n    }\n  }\n\n  // Return error if values does not contain at least one\n  // positive value and one negative value\n  if (!positive || !negative) {\n    return Number.NaN\n  }\n\n  const numer = Math.abs(npv(reinvestRate, values.map((x) => x > 0 ? x : 0)))\n  const denom = Math.abs(npv(financeRate, values.map(x => x < 0 ? x : 0)))\n  return (numer / denom) ** (1 / (values.length - 1)) * (1 + reinvestRate) - 1\n}\n\n/**\n * This function is here to simply have a different name for the 'fv'\n * function to not interfere with the 'fv' keyword argument within the 'ipmt'\n * function.  It is the 'remaining balance on loan' which might be useful as\n * it's own function, but is easily calculated with the 'fv' function.\n *\n * @private\n */\nfunction _rbl (rate: number, per: number, pmt: number, pv: number, when: PaymentDueTime) {\n  return fv(rate, (per - 1), pmt, pv, when)\n}\n\n/**\n * Evaluates `g(r_n)/g'(r_n)`, where:\n *\n * ```\n * g = fv + pv * (1+rate) ** nper + pmt * (1+rate * when)/rate * ((1+rate) ** nper - 1)\n * ```\n *\n * @private\n */\nfunction _gDivGp (r: number, n: number, p: number, x: number, y: number, when: PaymentDueTime): number {\n  const w = when === PaymentDueTime.Begin ? 1 : 0\n\n  const t1 = (r + 1) ** n\n  const t2 = (r + 1) ** (n - 1)\n  const g = y + t1 * x + p * (t1 - 1) * (r * w + 1) / r\n  const gp = (n * t2 * x -\n    p * (t1 - 1) * (r * w + 1) / (r ** 2) +\n    n * p * t2 * (r * w + 1) / r +\n    p * (t1 - 1) * w / r)\n  return g / gp\n}\n\n/**\n * Calculates the resulting amount.\n *\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n * ASF licensed (check the link for the full license)\n *\n * @private\n */\nfunction _irrResult (values: number[], dates: number[], rate: number): number {\n  const r = rate + 1\n  let result = values[0]\n  for (let i = 1; i < values.length; i++) {\n    result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365)\n  }\n  return result\n}\n\n/**\n * Calculates the first derivation\n *\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n * ASF licensed (check the link for the full license)\n *\n * @private\n */\nfunction _irrResultDeriv (values: number[], dates: number[], rate: number) : number {\n  const r = rate + 1\n  let result = 0\n  for (let i = 1; i < values.length; i++) {\n    const frac = (dates[i] - dates[0]) / 365\n    result -= frac * values[i] / Math.pow(r, frac + 1)\n  }\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}